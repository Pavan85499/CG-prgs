#include<GL/glu.h>
#include<GL/glut.h>

GLfloat t=0;

void spin()
{
    t=t+1;
    if(t>360)
       t=0;
    glutPostRedisplay();
}
void myinit()
{
    glClearColor(0,0,0,1);
    glColor3f(1,0,0);
    glEnable(GL_DEPTH_TEST);
}

void face(GLfloat A[],GLfloat B[],GLfloat C[],GLfloat D[])
{
    glBegin(GL_POLYGON);
    glVertex3fv(A);
    glVertex3fv(B);
    glVertex3fv(C);
    glVertex3fv(D);
    glEnd();
}
void  Cube(GLfloat V0[],GLfloat V1[],GLfloat V2[],GLfloat V3[],GLfloat V4[],GLfloat V5[],GLfloat V6[],GLfloat V7[])
{

    glColor3f(1,0,0);
    face(V0,V1,V2,V3);
    glColor3f(0,1,0);
    face(V4,V5,V6,V7);
    glColor3f(0,0,1);
    face(V0,V1,V5,V4);
    glColor3f(1,0,1);
    face(V3,V2,V6,V7);
    glColor3f(1,1,0);
    face(V0,V3,V7,V4);
    glColor3f(0,1,1);
    face(V1,V2,V6,V5);
}
void draw()
{
    GLfloat V[8][3]={
    {-0.5,0.5,0.5},
    {0.5,0.5,0.5},
    {0.5,-0.5,0.5},
    {-0.5,-0.5,0.5},
    {-0.5,0.5,-0.5},
    {0.5,0.5,-0.5},
    {0.5,-0.5,-0.5},
    {-0.5,-0.5,-0.5},
    };
glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
glLoadIdentity();
glRotatef(t,1,0,0);
Cube(V[0],V[1],V[2],V[3],V[4],V[5],V[6],V[7]);
glutSwapBuffers();
}
void main(int c,char**v[])
{

    glutInit(&c,v);

    glutInitWindowPosition(250,250);
    glutInitWindowSize(620,600);
    glutInitDisplayMode(GLUT_RGB|GLUT_DOUBLE|GLUT_DEPTH);
    glutCreateWindow("spin cube");
    myinit();
    glutDisplayFunc(draw);
    glutIdleFunc(spin);
    glutMainLoop();
    return 0;

}

